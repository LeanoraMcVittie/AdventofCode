// instruction checks
1,1,1,4,99,5,6,0,99 -> 30,1,1,4,2,5,6,0,99
1,0,0,0,99 -> 2,0,0,0,99
2,3,0,3,99 -> 2,3,0,6,99
2,4,4,5,99,0 -> 2,4,4,5,99,9801
1,9,10,3,2,3,11,0,99,30,40,50 -> 3500,9,10,70,2,3,11,0,99,30,40,50
1101,100,-1,4,0 -> 1101,100,-1,4,99
1002,4,3,4,33 -> 1002,4,3,4,99

// I/O Tests
3,9,8,9,10,9,4,9,99,-1,8 -> 8:1,7:0,9:0 // Using position mode, consider whether the input is equal to 8; output 1 (if it is) or 0 (if it is not).
3,9,7,9,10,9,4,9,99,-1,8 -> 3:1,7:1,12:0,8:0 // Using position mode, consider whether the input is less than 8; output 1 (if it is) or 0 (if it is not).
3,3,1108,-1,8,3,4,3,99 -> 8:1,7:0,9:0 // Using immediate mode, consider whether the input is equal to 8; output 1 (if it is) or 0 (if it is not).
3,3,1107,-1,8,3,4,3,99 -> 3:1,7:1,12:0,8:0 // Using immediate mode, consider whether the input is less than 8; output 1 (if it is) or 0 (if it is not).
3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9 -> 0:0,1:1,942:1,-42:1 // Using position mode, outputs 0 if the input was zero, 1 otherwise
3,3,1105,-1,9,1101,0,0,12,4,12,99,1 -> 0:0,1:1,942:1,-42:1 // Using immediate mode, outputs 0 if the input was zero, 1 otherwise
3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99 -> -2:999,0:999,7:999,8:1000,9:1001,832:1001 // Outputs 999 if the input is < 8, 1000 if the input = 8, and 1001 if the input > 8
109,1,204,-1,1001,100,1,100,1008,100,16,101,1006,101,0,99 -> 0:109 // output: a copy of itself - we check only the first value
1102,34915192,34915192,7,4,7,99,0 -> 0:1219070632396864 // output: a 16-digit number
104,1125899906842624,99 -> 0:1125899906842624 // should output the large number in the middle
